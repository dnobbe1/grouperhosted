{"version":3,"sources":["components/Card.js","components/GroupInput.js","components/GroupPrefs.js","components/PersonInput.js","components/InputContainer.js","components/App.js","index.js"],"names":["Card","state","list","style","backgroundColor","margin","className","textAlign","this","props","header","team","map","person","i","key","children","React","Component","GroupInput","label","value","name","type","onChange","onKeyDown","width","item","onClick","remove","arrayName","PersonInput","people","currentPerson","preferences","numGroupsRanked","handleAssign","incrementRank","addGroupPreference","groups","alert","currentRank","setState","group","currentPreferences","length","push","handleEnter","e","clearPerson","submitPerson","height","display","handleSubmitPerson","finalize","labels","InputContainer","personInput","groupInput","inputtingGroups","addArray","arr","arrayFromState","clearInput","inputName","handleChange","stateName","target","itemName","tempArray","splice","addItem","submit","updateArray","tempPerson","finishInputting","event","add","App","inputting","finished","groupSize","overflowPeople","finishedGroups","data","tempPeople","forEach","Math","floor","wrapUp","computeGroups","console","log","groupAssignments","shuffleAndAssign","groupsFull","assignRemainder","shuffle","preferredGroup","j","shift","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.4483e30d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Card extends React.Component {\r\n  state = {\r\n    list: [],\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ backgroundColor: \"lightGrey\", margin: \"10px\" }}>\r\n        <div className=\"header\">\r\n          <h4 style={{ textAlign: \"center\" }}>{this.props.header}</h4>\r\n        </div>\r\n        <div className=\"content\">\r\n          <div>\r\n            <ul>\r\n              {this.props.team\r\n                ? this.props.team.map((person, i) => {\r\n                    return <li key={i}>{person}</li>;\r\n                  })\r\n                : null}\r\n            </ul>\r\n            <div>{this.props.children}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card.js\";\r\nimport GroupPrefs from \"./GroupPrefs.js\";\r\n\r\nclass GroupInput extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <label>{this.props.label}</label>\r\n        <br />\r\n        <div>\r\n          <input\r\n            value={this.props.value}\r\n            name={this.props.name}\r\n            type={this.props.type}\r\n            onChange={this.props.onChange}\r\n            onKeyDown={this.props.onKeyDown}\r\n          />\r\n          <div style={{ width: \"50%\" }}>\r\n            <ul>\r\n              {this.props.list\r\n                ? this.props.list.map((item, i) => {\r\n                    return (\r\n                      <Card\r\n                        type=\"group\"\r\n                        key={i}\r\n                        team={item.team}\r\n                        header={item.name}\r\n                      >\r\n                        <button\r\n                          onClick={() =>\r\n                            this.props.remove(this.props.arrayName, item.name)\r\n                          }\r\n                        >\r\n                          Remove\r\n                        </button>\r\n                      </Card>\r\n                    );\r\n                  })\r\n                : null}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GroupInput;\r\n","import React from \"react\";\r\n\r\nclass GroupPrefs extends React.Component {\r\n  state = { doneAssigning: false };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.groups.map((group, i) => {\r\n          return <div key={i}>{group.name}</div>;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GroupPrefs;\r\n","import React from \"react\";\r\nimport Card from \"./Card.js\";\r\n\r\nclass PersonInput extends React.Component {\r\n  state = {\r\n    people: [],\r\n    currentPerson: { name: \"\", preferences: [] },\r\n    numGroupsRanked: 0,\r\n  };\r\n\r\n  handleAssign = (key) => {\r\n    if (this.state.currentPerson.name === \"\") {\r\n      alert(\"Please Enter A Name Before You Rank Groups\");\r\n      return;\r\n    }\r\n    this.incrementRank();\r\n    this.addGroupPreference(this.props.groups[key]);\r\n    return this.props.groups[key];\r\n  };\r\n\r\n  incrementRank = () => {\r\n    let currentRank = this.state.numGroupsRanked;\r\n    this.setState({\r\n      numGroupsRanked: currentRank + 1,\r\n    });\r\n  };\r\n\r\n  addGroupPreference = (group) => {\r\n    let person = this.state.currentPerson;\r\n    let currentPreferences = person.preferences;\r\n    for (let i = 0; i < currentPreferences.length; i++) {\r\n      if (currentPreferences[i].name === group.name) {\r\n        alert(\"You cannot assign a preference more than once!\");\r\n        return;\r\n      }\r\n    }\r\n    currentPreferences.push(group);\r\n    this.setState({\r\n      currentPerson: person,\r\n    });\r\n  };\r\n\r\n  handleSubmitPerson(person) {\r\n    let currentPerson = this.state.currentPerson;\r\n    this.props.submitPerson(currentPerson);\r\n    currentPerson.name = \"\";\r\n    currentPerson.preferences = [];\r\n    this.setState({\r\n      currentPerson: currentPerson,\r\n    });\r\n  }\r\n\r\n  handleEnter = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      let currentPerson = this.state.currentPerson;\r\n      currentPerson.name = this.props.value;\r\n      this.setState({\r\n        currentPerson: currentPerson,\r\n      });\r\n    }\r\n  };\r\n\r\n  clearPerson = () => {\r\n    this.setState({\r\n      currentPerson: { name: \"\", preferences: [] },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Enter Each Person</h3>\r\n        <h4>And Their Group Preferences</h4>\r\n        <div className=\"input\">\r\n          <input\r\n            value={this.props.value}\r\n            name={this.props.name}\r\n            type={this.props.type}\r\n            onChange={this.props.onChange}\r\n            onKeyDown={(e) => this.handleEnter(e)}\r\n          />\r\n        </div>\r\n        <div className=\"groups\">\r\n          {this.props.groups.map((group, i) => {\r\n            return (\r\n              <div\r\n                style={{\r\n                  backgroundColor: \"lightGreen\",\r\n                  height: \"50px\",\r\n                  margin: \"10px\",\r\n                }}\r\n                onClick={() => this.handleAssign(i)}\r\n                key={i}\r\n              >\r\n                <Card style={{ display: \"auto\" }} header={group.name} />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"currentPerson\" style={{ backgroundColor: \"yellow\" }}>\r\n          <h5>{this.state.currentPerson.name}</h5>\r\n          <div>\r\n            <button onClick={this.clearPerson}>\r\n              Clear Person and Start Over\r\n            </button>\r\n            {this.state.currentPerson.preferences.map((group, i) => {\r\n              return (\r\n                <div key={i}>\r\n                  Preference {i + 1}: {group.name}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        {this.state.currentPerson.name &&\r\n        this.state.currentPerson.preferences.length ===\r\n          this.props.groups.length ? (\r\n          <button onClick={() => this.handleSubmitPerson()}>Submit</button>\r\n        ) : null}\r\n        <button onClick={() => this.props.finalize()}>\r\n          Done Inputting All People\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PersonInput;\r\n","import React from \"react\";\r\nimport GroupInput from \"./GroupInput.js\";\r\nimport PersonInput from \"./PersonInput.js\";\r\n\r\nconst labels = {\r\n  peopleLabel: \"Input People\",\r\n  groupLabel: \"Input Groups\",\r\n};\r\n\r\nclass InputContainer extends React.Component {\r\n  state = {\r\n    groups: [],\r\n    people: [],\r\n    personInput: \"\",\r\n    groupInput: \"\",\r\n    inputtingGroups: true,\r\n  };\r\n\r\n  handleEnter(event, arr) {\r\n    if (event.key === \"Enter\") {\r\n      this.addArray(arr, { name: event.target.value });\r\n      this.clearInput(event.target.name);\r\n    }\r\n  }\r\n\r\n  handlePersonEnter(event, arr) {\r\n    if (event.key === \"Enter\") {\r\n      this.addArray(arr, { name: event.target.value });\r\n      this.clearInput(event.target.name);\r\n    }\r\n  }\r\n\r\n  addArray = (arr, item) => {\r\n    let arrayFromState = this.state[arr];\r\n    arrayFromState.push(item);\r\n    this.setState({\r\n      [arr]: arrayFromState,\r\n    });\r\n  };\r\n\r\n  clearInput = (inputName) => {\r\n    this.setState({\r\n      [inputName]: \"\",\r\n    });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const stateName = e.target.name;\r\n    const value = e.target.value;\r\n    this.setState({\r\n      [stateName]: value,\r\n    });\r\n  };\r\n\r\n  remove = (arrayName, itemName) => {\r\n    let tempArray = this.state[arrayName];\r\n    for (let i = 0; i < tempArray.length; i++) {\r\n      if (tempArray[i].name === itemName) {\r\n        tempArray.splice(i, 1);\r\n      }\r\n    }\r\n    this.setState({\r\n      [arrayName]: tempArray,\r\n    });\r\n  };\r\n\r\n  addItem = (itemName) => {};\r\n\r\n  submit = () => {\r\n    this.setState({\r\n      inputtingGroups: false,\r\n    });\r\n    this.props.updateArray(\"groups\", this.state.groups);\r\n  };\r\n\r\n  submitPerson = (person) => {\r\n    let tempPerson = { name: \"\", preferences: [] };\r\n    tempPerson.name = person.name;\r\n    for (let i = 0; i < person.preferences.length; i++) {\r\n      tempPerson.preferences.push(person.preferences[i].name);\r\n    }\r\n    let people = this.state.people;\r\n    people.push(tempPerson);\r\n    this.setState({\r\n      people: people,\r\n    });\r\n  };\r\n\r\n  finalize = () => {\r\n    this.props.updateArray(\"people\", this.state.people);\r\n    this.props.finishInputting();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.inputtingGroups ? (\r\n          <div>\r\n            <GroupInput\r\n              name=\"groupInput\"\r\n              value={this.state.groupInput}\r\n              type=\"text\"\r\n              onChange={this.handleChange}\r\n              onKeyDown={(e) => this.handleEnter(e, \"groups\")}\r\n              arrayName=\"groups\"\r\n              label={labels.groupLabel}\r\n              list={this.state.groups}\r\n              add={this.addItem}\r\n              remove={this.remove}\r\n            />\r\n            <button onClick={this.submit}>Enter Groups</button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <PersonInput\r\n              name=\"personInput\"\r\n              value={this.state.personInput}\r\n              type=\"text\"\r\n              onChange={this.handleChange}\r\n              groups={this.state.groups}\r\n              submitPerson={this.submitPerson}\r\n              finalize={this.finalize}\r\n            ></PersonInput>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputContainer;\r\n","import React from \"react\";\r\nimport InputContainer from \"./InputContainer.js\";\r\nimport Card from \"./Card\";\r\nimport shuffle from \"shuffle-array\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    groups: [],\r\n    people: [],\r\n    inputting: true,\r\n    finished: false,\r\n    groupSize: [],\r\n    overflowPeople: [],\r\n    finishedGroups: [],\r\n  };\r\n\r\n  updateArray = (arrayName, data) => {\r\n    if (arrayName === \"people\") {\r\n      let tempPeople = this.state.people;\r\n      data.forEach((person) => {\r\n        let tempPerson = { name: \"\", preferences: [] };\r\n        tempPerson.name = person.name;\r\n        tempPerson.preferences = person.preferences;\r\n        tempPeople.push(tempPerson);\r\n      });\r\n      this.setState({\r\n        people: tempPeople,\r\n        groupSize: Math.floor(tempPeople.length / this.state.groups.length),\r\n      });\r\n    } else {\r\n      this.setState({\r\n        [arrayName]: data,\r\n      });\r\n    }\r\n  };\r\n\r\n  finishInputting = () => {\r\n    this.setState({\r\n      inputting: false,\r\n    });\r\n  };\r\n\r\n  wrapUp = () => {\r\n    this.computeGroups();\r\n  };\r\n\r\n  computeGroups = () => {\r\n    let people = this.state.people;\r\n    let groups = this.state.groups;\r\n    groups.forEach((group) => {\r\n      group.people = [];\r\n    });\r\n    console.log(\"People:\");\r\n    console.log(people);\r\n    console.log(\"Groups\");\r\n    console.log(groups);\r\n    let groupAssignments = this.shuffleAndAssign(groups, people);\r\n    console.log(groupAssignments);\r\n    this.setState({\r\n      finishedGroups: groups,\r\n      finished: true,\r\n    });\r\n  };\r\n\r\n  shuffleAndAssign = (groups, people) => {\r\n    console.log(this.state.groupSize);\r\n    console.log(people.length);\r\n    let groupsFull = true;\r\n    groups.forEach((group) => {\r\n      if (group.people.length < this.state.groupSize) {\r\n        groupsFull = false;\r\n      }\r\n    });\r\n    if (groupsFull) {\r\n      this.assignRemainder(groups, people);\r\n      return groups;\r\n    }\r\n    if (people.length === 0) {\r\n      return groups;\r\n    }\r\n    let tempPeople = [];\r\n    for (let i = 0; i < people.length; i++) {\r\n      tempPeople.push(people[i]);\r\n    }\r\n    shuffle(tempPeople);\r\n    for (let i = 0; i < tempPeople.length; i++) {\r\n      let preferredGroup = tempPeople[i].preferences[0];\r\n      for (let j = 0; j < groups.length; j++) {\r\n        if (groups[j].name === preferredGroup) {\r\n          if (groups[j].people.length >= this.state.groupSize) {\r\n            tempPeople[i].preferences.shift();\r\n            break;\r\n          } else {\r\n            groups[j].people.push(tempPeople[i].name);\r\n            tempPeople.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.shuffleAndAssign(groups, tempPeople);\r\n  };\r\n\r\n  assignRemainder = (groups, people) => {\r\n    /*people.forEach((person) => {\r\n      for (let i = 0; i < groups.length; i++) {\r\n        if (groups[i].name === person.preferences[0]) {\r\n          groups[i].people.push(person.name);\r\n        }\r\n      }\r\n    });\r\n    */\r\n    let overflowPeople = [];\r\n    for (let i = 0; i < people.length; i++) {\r\n      overflowPeople.push(people[i]);\r\n    }\r\n    this.setState({\r\n      overflowPeople: overflowPeople,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.finished) {\r\n      return (\r\n        <div>\r\n          <div>\r\n            <h1>The Grouper</h1>\r\n          </div>\r\n          {this.state.inputting ? (\r\n            <InputContainer\r\n              finishInputting={this.finishInputting}\r\n              updateArray={this.updateArray}\r\n            />\r\n          ) : (\r\n            <div>\r\n              <button onClick={this.wrapUp}>Finish And Group</button>\r\n              <div>\r\n                <h3>Groups:</h3>\r\n                {this.state.groups.map((group, i) => {\r\n                  return <Card key={i} header={group.name} />;\r\n                })}\r\n              </div>\r\n              <br />\r\n              <div>\r\n                <h3>People:</h3>\r\n                {this.state.people.map((person, j) => {\r\n                  return <h4 key={j}>{person.name}</h4>;\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          {this.state.finishedGroups ? (\r\n            this.state.finishedGroups.map((group, i) => {\r\n              return (\r\n                <Card key={i} header={group.name}>\r\n                  <div>\r\n                    <ul>\r\n                      {group.people.map((person, j) => {\r\n                        return <li>{person}</li>;\r\n                      })}\r\n                    </ul>\r\n                  </div>\r\n                </Card>\r\n              );\r\n            })\r\n          ) : (\r\n            <p>Loading</p>\r\n          )}\r\n\r\n          <div>\r\n            <h4>People left over. Assign these people manually.</h4>\r\n            {this.state.overflowPeople\r\n              ? this.state.overflowPeople.map((person, i) => {\r\n                  return <p key={i}>{person.name}</p>;\r\n                })\r\n              : null}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App.js\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}